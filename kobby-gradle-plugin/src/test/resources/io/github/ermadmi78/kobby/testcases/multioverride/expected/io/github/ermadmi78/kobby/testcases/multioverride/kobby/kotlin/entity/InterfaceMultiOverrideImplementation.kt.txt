@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideContext
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideDSL
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideSubscriber
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit

public interface InterfaceMultiOverrideImplementation : MultiOverrideContext,
    InterfaceMultiOverride, InterfaceBase1, InterfaceBase2 {
  public override val noOverride1: String

  public override val noOverride2: String

  public override val interfaceMultiOverride: String

  public val finalField: String

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      MultiOverrideSubscriber<Subscription>

  public fun InterfaceMultiOverrideImplementationProjection.__withCurrentProjection(): Unit
}

@MultiOverrideDSL
public interface InterfaceMultiOverrideImplementationProjection : InterfaceMultiOverrideProjection,
    InterfaceBase1Projection, InterfaceBase2Projection {
  public override fun noOverride1(size: Int?): Unit

  public override fun noOverride2(size: Int?): Unit

  public override fun interfaceMultiOverride(size: Int?): Unit

  public fun finalField(size: Int? = null): Unit

  public override fun __minimize(): Unit {
  }
}
