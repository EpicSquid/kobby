@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package my.root.re

import graphql.kickstart.tools.GraphQLQueryResolver
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.TODO
import kotlin.collections.List
import my.root.dto1.DPrefActorDPost
import my.root.dto1.DPrefCountryDPost
import my.root.dto1.DPrefFilmDPost
import my.root.dto1.EPrefGenderEPost
import my.root.dto1.EPrefGenreEPost

public interface RePrMyQueryRePo : GraphQLQueryResolver {
  public suspend fun country(id: Long): DPrefCountryDPost? = TODO("ToDo")

  public suspend fun countries(name: String?, limit: Int): List<DPrefCountryDPost> = TODO("ToDo")

  public suspend fun film(id: Long): DPrefFilmDPost? = TODO("ToDo")

  public suspend fun films(
    title: String?,
    genre: EPrefGenreEPost?,
    limit: Int,
    offset: Int
  ): List<DPrefFilmDPost> = TODO("ToDo")

  public suspend fun actor(id: Long): DPrefActorDPost? = TODO("ToDo")

  public suspend fun actors(
    firstName: String?,
    lastName: String?,
    gender: EPrefGenderEPost?,
    limit: Int
  ): List<DPrefActorDPost> = TODO("ToDo")
}
