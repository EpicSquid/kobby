@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package my.root.dto1

import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.collections.List
import kotlin.let
import my.root.ctx.PrefCtxDSLPostCtx

@JsonTypeName(value = "Film")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = DPrefFilmDPost::class
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class DPrefFilmDPost(
  public override val id: Long? = null,
  public override val fields: String? = null,
  public val title: String? = null,
  public val genre: EPrefGenreEPost? = null,
  public val countryId: Long? = null,
  public val country: DPrefCountryDPost? = null,
  public val actors: List<DPrefActorDPost>? = null
) : DPrefEntityDPost, DPrefNativeDPost {
  public override fun equals(other: Any?): Boolean {
    if (this === other) {
      return true
    }
    if (this.javaClass != other?.javaClass) {
      return false
    }

    other as DPrefFilmDPost
    return this.id == other.id
  }

  public override fun hashCode(): Int = this.id?.hashCode() ?: 0
}

public fun DPrefFilmDPost(block: BPrefDPrefFilmDPostBPost.() -> Unit): DPrefFilmDPost {
  // DPrefFilmDPost builder DSL
  return BPrefDPrefFilmDPostBPost().apply(block).let {
    DPrefFilmDPost(
          it.id,
          it.fields,
          it.title,
          it.genre,
          it.countryId,
          it.country,
          it.actors
        )
  }
}

public fun DPrefFilmDPost.replicate(block: BPrefDPrefFilmDPostBPost.() -> Unit): DPrefFilmDPost {
  // DPrefFilmDPost replicate DSL
  return BPrefDPrefFilmDPostBPost().also {
    it.id = this.id
    it.fields = this.fields
    it.title = this.title
    it.genre = this.genre
    it.countryId = this.countryId
    it.country = this.country
    it.actors = this.actors
  }
  .apply(block).let {
    DPrefFilmDPost(
          it.id,
          it.fields,
          it.title,
          it.genre,
          it.countryId,
          it.country,
          it.actors
        )
  }
}

@PrefCtxDSLPostCtx
public class BPrefDPrefFilmDPostBPost {
  public var id: Long? = null

  public var fields: String? = null

  public var title: String? = null

  public var genre: EPrefGenreEPost? = null

  public var countryId: Long? = null

  public var country: DPrefCountryDPost? = null

  public var actors: List<DPrefActorDPost>? = null
}
