@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.ktor_dynamic_http_headers.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.ktor_dynamic_http_headers.kobby.kotlin.CountryContext
import io.github.ermadmi78.kobby.testcases.ktor_dynamic_http_headers.kobby.kotlin.CountryDSL
import io.github.ermadmi78.kobby.testcases.ktor_dynamic_http_headers.kobby.kotlin.CountrySubscriber
import kotlin.Suppress
import kotlin.Unit

public interface Subscription : CountryContext {
  public val countryCreated: Country

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      CountrySubscriber<Subscription>

  public fun SubscriptionProjection.__withCurrentProjection(): Unit
}

@CountryDSL
public interface SubscriptionProjection {
  public fun countryCreated(__projection: CountryProjection.() -> Unit): Unit

  public fun __minimize(): Unit {
  }
}
