@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.adapter.ktor

import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.CountryAdapter
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.CountryMapper
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.CountryReceiver
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.SubscriptionDto
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryClientMessage
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryException
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMessageComplete
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMessageConnectionAck
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMessageConnectionError
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMessageConnectionInit
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMessageConnectionKeepAlive
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMessageConnectionTerminate
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMessageData
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMessageError
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMessageStart
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMessageStop
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryMutationResult
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryQueryResult
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryRequest
import io.github.ermadmi78.kobby.testcases.ktor_static_http_headers.kobby.kotlin.dto.graphql.CountryServerMessage
import io.ktor.client.HttpClient
import io.ktor.client.plugins.websocket.webSocket
import io.ktor.client.request.post
import io.ktor.client.request.setBody
import io.ktor.client.request.url
import io.ktor.client.statement.bodyAsText
import io.ktor.http.ContentType
import io.ktor.http.contentType
import io.ktor.websocket.Frame
import io.ktor.websocket.WebSocketSession
import io.ktor.websocket.readText
import io.ktor.websocket.send
import kotlin.Any
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.Map
import kotlin.collections.contains
import kotlin.collections.forEach
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.collections.plus
import kotlin.coroutines.cancellation.CancellationException
import kotlin.error
import kotlin.let
import kotlin.random.Random
import kotlin.require
import kotlin.takeIf
import kotlin.to
import kotlinx.coroutines.withTimeout

public open class CountryCompositeKtorAdapter(
  protected val client: HttpClient,
  protected val httpUrl: String,
  protected val webSocketUrl: String,
  protected val mapper: CountryMapper,
  protected val requestHeaders: Map<String, String> = mapOf(),
  protected val subscriptionPayload: Map<String, Any?>? = null,
  protected val subscriptionReceiveTimeoutMillis: Long? = null,
  protected val httpAuthorizationTokenHeader: String = "Authorization",
  protected val webSocketAuthorizationTokenHeader: String = "authToken",
  protected val idGenerator: () -> String = { Random.nextLong().toString() },
  protected val listener: (CountryRequest) -> Unit = {},
) : CountryAdapter {
  public override suspend fun executeQuery(query: String, variables: Map<String, Any?>): QueryDto {
    val request = CountryRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, CountryQueryResult::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw CountryException("GraphQL query failed", request, it)
    }
    return result.data ?: throw CountryException(
          "GraphQL query completes successfully but returns no data",
          request
        )
  }

  public override suspend fun executeMutation(query: String, variables: Map<String, Any?>):
      MutationDto {
    val request = CountryRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = requestHeaders
    val content = client.post {
      setBody<String>(mapper.serialize(request))
      contentType(ContentType.Application.Json)
      url(httpUrl)
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }
    .bodyAsText()

    val result = mapper.deserialize(content, CountryMutationResult::class)

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw CountryException("GraphQL mutation failed", request, it)
    }
    return result.data ?: throw CountryException(
          "GraphQL mutation completes successfully but returns no data",
          request
        )
  }

  public override suspend fun executeSubscription(
    query: String,
    variables: Map<String, Any?>,
    block: suspend CountryReceiver<SubscriptionDto>.() -> Unit,
  ): Unit {
    val httpHeaders: Map<String, String> = requestHeaders
    val payload: Map<String, Any?>? = subscriptionPayload
    client.webSocket(
      webSocketUrl,
      request = {
        httpHeaders.forEach { (key, value) ->
          headers[key] = value
        }
      }
    ) {
      var initPayload: Map<String, Any?>? = payload
      if (httpAuthorizationTokenHeader in httpHeaders) {
        if (initPayload == null) {
          initPayload = mapOf()
        }

        if (webSocketAuthorizationTokenHeader !in initPayload) {
          @Suppress("SuspiciousCollectionReassignment")
          initPayload += mapOf(webSocketAuthorizationTokenHeader to
              httpHeaders[httpAuthorizationTokenHeader])
        }
      }

      val request = CountryRequest(query, variables)
      listener(request)

      executeSubscriptionImpl(initPayload, request, block)
    }
  }

  protected open suspend fun WebSocketSession.executeSubscriptionImpl(
    initPayload: Map<String, Any?>?,
    request: CountryRequest,
    block: suspend CountryReceiver<SubscriptionDto>.() -> Unit,
  ): Unit {
    sendMessage(CountryMessageConnectionInit(initPayload))
    try {
      while (true) {
        when (val reply = receiveMessage()) {
          is CountryMessageConnectionKeepAlive -> {
            continue
          }
          is CountryMessageConnectionAck -> {
            break
          }
          is CountryMessageConnectionError -> {
            throw CountryException("""Connection error: ${reply.payload}""", request)
          }
          else -> {
            throw CountryException("""Invalid protocol - unexpected reply: $reply""", request)
          }
        }
      }

      val subscriptionId = idGenerator()
      sendMessage(CountryMessageStart(subscriptionId, request))

      try {
        block.invoke(object : CountryReceiver<SubscriptionDto> {
          public override suspend fun receive(): SubscriptionDto {
            while (true) {
              when (val reply = receiveMessage()) {
                is CountryMessageData -> {
                  require(reply.id == subscriptionId)

                  val result = reply.payload
                  result.errors?.takeIf { it.isNotEmpty() }?.let {
                    throw CountryException("GraphQL subscription failed", request, it)
                  }
                  return result.data ?: throw CountryException(
                        "GraphQL subscription completes successfully but returns no data",
                        request
                      )
                }
                is CountryMessageError -> {
                  require(reply.id == subscriptionId)
                  throw CountryException("Subscription failed", request, reply.payload.errors)
                }
                is CountryMessageComplete -> {
                  require(reply.id == subscriptionId)
                  throw CancellationException("Subscription finished")
                }
                is CountryMessageConnectionKeepAlive -> {
                  continue
                }
                else -> {
                  throw CountryException("""Invalid protocol - unexpected reply: $reply""", request)
                }
              }
            }

            @Suppress("UNREACHABLE_CODE")
            error("Invalid algorithm")
          }
        })
      }
      finally {
        sendMessage(CountryMessageStop(subscriptionId))
      }
    }
    finally {
      sendMessage(CountryMessageConnectionTerminate())
    }
  }

  protected open suspend fun WebSocketSession.sendMessage(message: CountryClientMessage): Unit {
    val content = mapper.serialize(message)
    send(content)
  }

  protected open suspend fun WebSocketSession.receiveMessage(): CountryServerMessage {
    val message = if (subscriptionReceiveTimeoutMillis == null) {
      incoming.receive()
    }
    else {
      withTimeout(subscriptionReceiveTimeoutMillis) {
        incoming.receive()
      }
    }

    val content = (message as Frame.Text).readText()
    return mapper.deserialize(content, CountryServerMessage::class)
  }
}
