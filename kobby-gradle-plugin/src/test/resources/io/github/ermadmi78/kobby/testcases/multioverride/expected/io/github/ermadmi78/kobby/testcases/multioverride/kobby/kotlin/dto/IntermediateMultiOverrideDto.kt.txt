@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideDSL
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.let

public data class IntermediateMultiOverrideDto(
  public override val noOverride0: String? = null,
  public override val noOverride1: String? = null,
  public override val complexMultiOverride: String? = null,
  public override val intermediateNoOverride: String? = null,
  public override val intermediateMultiOverride: String? = null,
  public val finalField: String? = null,
) : ComplexIntermediateBase1Dto, ComplexBase1Dto, IntermediateBaseDto

public fun IntermediateMultiOverrideDto(block: IntermediateMultiOverrideDtoBuilder.() -> Unit):
    IntermediateMultiOverrideDto {
  // IntermediateMultiOverrideDto builder DSL
  return IntermediateMultiOverrideDtoBuilder().apply(block).let {
    IntermediateMultiOverrideDto(
          it.noOverride0,
          it.noOverride1,
          it.complexMultiOverride,
          it.intermediateNoOverride,
          it.intermediateMultiOverride,
          it.finalField
        )
  }
}

public fun IntermediateMultiOverrideDto.copy(block: IntermediateMultiOverrideDtoBuilder.() -> Unit):
    IntermediateMultiOverrideDto {
  // IntermediateMultiOverrideDto copy DSL
  return IntermediateMultiOverrideDtoBuilder().also {
    it.noOverride0 = this.noOverride0
    it.noOverride1 = this.noOverride1
    it.complexMultiOverride = this.complexMultiOverride
    it.intermediateNoOverride = this.intermediateNoOverride
    it.intermediateMultiOverride = this.intermediateMultiOverride
    it.finalField = this.finalField
  }
  .apply(block).let {
    IntermediateMultiOverrideDto(
          it.noOverride0,
          it.noOverride1,
          it.complexMultiOverride,
          it.intermediateNoOverride,
          it.intermediateMultiOverride,
          it.finalField
        )
  }
}

@MultiOverrideDSL
public class IntermediateMultiOverrideDtoBuilder {
  public var noOverride0: String? = null

  public var noOverride1: String? = null

  public var complexMultiOverride: String? = null

  public var intermediateNoOverride: String? = null

  public var intermediateMultiOverride: String? = null

  public var finalField: String? = null
}
