@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.context_inheritance_and_fun.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.context_inheritance_and_fun.kobby.kotlin.ContextInheritanceAndFunContext
import io.github.ermadmi78.kobby.testcases.context_inheritance_and_fun.kobby.kotlin.ContextInheritanceAndFunDSL
import io.github.ermadmi78.kobby.testcases.context_inheritance_and_fun.kobby.kotlin.ContextInheritanceAndFunSubscriber
import kotlin.Suppress
import kotlin.Unit

public interface Mutation : ContextInheritanceAndFunContext {
  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      ContextInheritanceAndFunSubscriber<Subscription>

  public fun myContext(): ContextInheritanceAndFunContext

  public fun MutationProjection.__withCurrentProjection(): Unit
}

@ContextInheritanceAndFunDSL
public interface MutationProjection {
  public fun __minimize(): Unit {
  }
}
