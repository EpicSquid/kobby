@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
)

package io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.ContextFunOnlyContext
import io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.ContextFunOnlyDSL
import kotlin.Long
import kotlin.Suppress
import kotlin.Unit

public interface Entity {
  public val id: Long

  public fun __context(): ContextFunOnlyContext
}

@ContextFunOnlyDSL
public interface EntityProjection {
  public fun __minimize(): Unit {
  }
}

@ContextFunOnlyDSL
public interface EntityQualification {
  public fun __onFilm(__projection: FilmProjection.() -> Unit = {}): Unit

  public fun __onActor(__projection: ActorProjection.() -> Unit = {}): Unit

  public fun __onCountry(__projection: CountryProjection.() -> Unit = {}): Unit
}

@ContextFunOnlyDSL
public interface EntityQualifiedProjection : EntityProjection, EntityQualification
