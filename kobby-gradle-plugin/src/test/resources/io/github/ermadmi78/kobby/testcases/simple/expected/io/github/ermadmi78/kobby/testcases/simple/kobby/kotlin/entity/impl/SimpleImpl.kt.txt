@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
)

package io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.impl

import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.SimpleContext
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.SimpleSubscriber
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.dto.SimpleDto
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.Mutation
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.MutationProjection
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.Query
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.QueryProjection
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.Simple
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.SimpleProjection
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.Subscription
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity.SubscriptionProjection
import kotlin.Any
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder
import kotlin.text.buildString

internal class SimpleImpl(
  internal val __innerContext: SimpleContext,
  internal val __innerProjection: SimpleProjectionImpl,
  internal val __innerDto: SimpleDto,
) : Simple {
  public override val id: Long
    get() {
      if (!__innerProjection.__innerId0) {
        error("Property [id] is not available - add [id] projection to switch on it")
      }
      return __innerDto.id!!
    }

  public override val name: String
    get() {
      if (!__innerProjection.__innerName1) {
        error("Property [name] is not available - add [name] projection to switch on it")
      }
      return __innerDto.name!!
    }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE")
  public override fun toString(): String = buildString {
    append("Simple").append('(')

    var counter = 0

    if (__innerProjection.__innerId0) {
      if (counter++ > 0) {
        append(", ")
      }
      append("id").append('=').append(id)
    }

    if (__innerProjection.__innerName1) {
      if (counter++ > 0) {
        append(", ")
      }
      append("name").append('=').append(name)
    }

    append(')')
  }

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query =
      __innerContext.query(__projection)

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation =
      __innerContext.mutation(__projection)

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      SimpleSubscriber<Subscription> = __innerContext.subscription(__projection)

  public override fun SimpleProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class SimpleProjectionImpl : SimpleProjection {
  internal var __innerId0: Boolean = false

  internal var __innerName1: Boolean = false

  public override fun id(): Unit {
    __innerId0 = true
  }

  public override fun name(): Unit {
    __innerName1 = true
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: SimpleProjection): Unit {
    if ("id" !in ignore && __innerId0) {
      __projection.id()
    }
    if ("name" !in ignore && __innerName1) {
      __projection.name()
    }
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE")
  internal fun ___innerBuild(
    ignore: Set<String>,
    header: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>,
  ): Unit {
    body.append(' ').append('{')

    // Field: id
    if ("id" !in ignore && __innerId0) {
      body.append(' ').append("id")
    }

    // Field: name
    if ("name" !in ignore && __innerName1) {
      body.append(' ').append("name")
    }

    body.append(' ').append('}')
  }
}

internal fun SimpleDto.buildEntity(__innerContext: SimpleContext,
    __innerProjection: SimpleProjectionImpl): Simple = SimpleImpl(__innerContext, __innerProjection,
    this)
