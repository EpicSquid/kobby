@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.SimpleContext
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.SimpleDSL
import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.SimpleSubscriber
import kotlin.Int
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

/**
 *  Query type
 */
public interface Query : SimpleContext {
  /**
   *  find all
   */
  public val all: List<List<List<Simple>?>>?

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      SimpleSubscriber<Subscription>

  public fun QueryProjection.__withCurrentProjection(): Unit
}

/**
 *  Query type
 */
@SimpleDSL
public interface QueryProjection {
  /**
   *  find all
   *
   * @param limit  limit result list
   */
  public fun all(limit: Int? = null, __projection: SimpleProjection.() -> Unit): Unit

  public fun __minimize(): Unit {
  }
}
