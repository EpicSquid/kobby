@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.impl

import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlContext
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlSubscriber
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.MyInput
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto.MyMutationDto
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MyMutation
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MyMutationProjection
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MyQuery
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MyQueryProjection
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MySubscription
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.entity.MySubscriptionProjection
import kotlin.Any
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.MutableMap
import kotlin.collections.Set
import kotlin.collections.setOf
import kotlin.error
import kotlin.text.StringBuilder

internal class MyMutationImpl(
  internal val __innerContext: GraphqlContext,
  internal val __innerProjection: MyMutationProjectionImpl,
  internal val __innerDto: MyMutationDto
) : MyMutation {
  public override val insert: Boolean
    get() {
      if (!__innerProjection.__innerInsert0) {
        error("Property [insert] is not available - add [insert] projection to switch on it")
      }
      return __innerDto.insert!!
    }

  public override suspend fun query(__projection: MyQueryProjection.() -> Unit): MyQuery =
      __innerContext.query(__projection)

  public override suspend fun mutation(__projection: MyMutationProjection.() -> Unit): MyMutation =
      __innerContext.mutation(__projection)

  public override fun subscription(__projection: MySubscriptionProjection.() -> Unit):
      GraphqlSubscriber<MySubscription> = __innerContext.subscription(__projection)

  public override fun MyMutationProjection.__withCurrentProjection(): Unit {
    __innerProjection.___innerRepeatProjection(setOf(), this)
  }
}

internal open class MyMutationProjectionImpl : MyMutationProjection {
  internal var __innerInsert0: Boolean = false

  internal var __innerInsert0Data: MyInput? = null

  public override fun insert(`data`: MyInput): Unit {
    __innerInsert0 = true
    __innerInsert0Data = data
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE")
  internal fun ___innerRepeatProjection(ignore: Set<String>, __projection: MyMutationProjection):
      Unit {
    if ("insert" !in ignore && __innerInsert0) {
      __projection.insert(__innerInsert0Data!!)
    }
  }

  @Suppress("UNUSED_PARAMETER", "UNUSED_CHANGED_VALUE")
  internal fun ___innerBuild(
    ignore: Set<String>,
    header: StringBuilder,
    body: StringBuilder,
    arguments: MutableMap<String, Any>
  ): Unit {
    body.append(' ').append('{')

    // Field: insert
    if ("insert" !in ignore && __innerInsert0) {
      body.append(' ').append("insert")
      var counter = 0
      val addBrackets = true
      if (addBrackets) {
        body.append('(')
      }

      // Argument: insert.data
      if (true) {
        if (counter++ > 0) {
          body.append(", ")
        }
        val arg = "arg" + arguments.size
        arguments[arg] = __innerInsert0Data!!
        body.append("data").append(": ").append('$').append(arg)

        if (header.isNotEmpty()) {
          header.append(", ")
        }
        header.append('$').append(arg).append(": ").append("MyInput!")
      }

      if (addBrackets) {
        body.append(')')
      }
    }

    body.append(' ').append('}')
  }
}

internal fun MyMutationDto.buildEntity(__innerContext: GraphqlContext,
    __innerProjection: MyMutationProjectionImpl): MyMutation = MyMutationImpl(__innerContext,
    __innerProjection, this)
