@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.ContextFunOnlyDSL
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.error
import kotlin.let

public data class ActorInput(
  public val firstName: String,
  public val lastName: String? = null,
  public val gender: Gender
)

public fun ActorInput(block: ActorInputBuilder.() -> Unit): ActorInput {
  // ActorInput builder DSL
  return ActorInputBuilder().apply(block).let {
    ActorInput(
          it.firstName ?: error("ActorInput: 'firstName' must not be null"),
          it.lastName,
          it.gender ?: error("ActorInput: 'gender' must not be null")
        )
  }
}

public fun ActorInput.copy(block: ActorInputBuilder.() -> Unit): ActorInput {
  // ActorInput copy DSL
  return ActorInputBuilder().also {
    it.firstName = this.firstName
    it.lastName = this.lastName
    it.gender = this.gender
  }
  .apply(block).let {
    ActorInput(
          it.firstName ?: error("ActorInput: 'firstName' must not be null"),
          it.lastName,
          it.gender ?: error("ActorInput: 'gender' must not be null")
        )
  }
}

@ContextFunOnlyDSL
public class ActorInputBuilder {
  public var firstName: String? = null

  public var lastName: String? = null

  public var gender: Gender? = null
}
