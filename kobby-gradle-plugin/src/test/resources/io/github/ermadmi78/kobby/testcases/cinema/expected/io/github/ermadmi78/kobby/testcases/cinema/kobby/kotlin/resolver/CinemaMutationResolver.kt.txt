@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.resolver

import graphql.kickstart.tools.GraphQLMutationResolver
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.ActorDto
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.ActorInput
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.CountryDto
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.FilmDto
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.FilmInput
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.TagInput
import kotlin.Boolean
import kotlin.Long
import kotlin.String
import kotlin.Suppress

public interface CinemaMutationResolver : GraphQLMutationResolver {
  /**
   * Create country
   *
   * @param name Name of the country
   */
  public suspend fun createCountry(name: String): CountryDto

  /**
   * Create film
   *
   * @param countryId ID of the country to which the film belongs
   * @param film Film input data
   * @param tags Add tag to film if tag is not null
   */
  public suspend fun createFilm(
    countryId: Long,
    film: FilmInput,
    tags: TagInput?
  ): FilmDto

  /**
   * Create actor
   *
   * @param countryId ID of the country to which the actor belongs
   * @param actor Actor input data
   * @param tags Add tag to actor if tag is not null
   */
  public suspend fun createActor(
    countryId: Long,
    actor: ActorInput,
    tags: TagInput?
  ): ActorDto

  /**
   * Associate film with actor
   *
   * @param filmId ID of film
   * @param actorId ID of actor
   */
  public suspend fun associate(filmId: Long, actorId: Long): Boolean

  /**
   * Add tag to film.
   * Returns false if the film already had such a tag
   *
   * @param filmId ID of film
   * @param tagValue Tag value
   */
  public suspend fun tagFilm(filmId: Long, tagValue: String): Boolean

  /**
   * Add tag to actor.
   * Returns false if the actor already had such a tag
   *
   * @param actorId ID of actor
   * @param tagValue Tag value
   */
  public suspend fun tagActor(actorId: Long, tagValue: String): Boolean
}
