@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.CinemaDSL
import kotlin.Any
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.let

/**
 * Country entity.
 * The country can be home to several films and several actors.
 */
@JsonTypeName(value = "Country")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = CountryDto::class
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class CountryDto(
  /**
   * Unique identifier of entity
   */
  public override val id: Long? = null,
  /**
   * Fields of entity in key-value map.
   * Introduced for testing complex scalars.
   */
  public override val fields: Map<String, Any?>? = null,
  /**
   * The name of the country
   */
  public val name: String? = null,
  /**
   * Find film by id.
   * Returns null if not found.
   */
  public val film: FilmDto? = null,
  /**
   * Find films of country by title and genre.
   * Returns empty list if not found.
   */
  public val films: List<FilmDto>? = null,
  /**
   * Find actor by id.
   * Returns null if not found.
   */
  public val actor: ActorDto? = null,
  /**
   * Find actors of country by firstName, lastName, birthday and gender.
   * Returns empty list if not found.
   */
  public val actors: List<ActorDto>? = null,
  /**
   * Find entities of this country by tag
   */
  public val taggable: List<TaggableDto>? = null,
  /**
   * Find native entities of this country
   */
  public val native: List<NativeDto>? = null
) : EntityDto

public fun CountryDto(block: CountryDtoBuilder.() -> Unit): CountryDto {
  // CountryDto builder DSL
  return CountryDtoBuilder().apply(block).let {
    CountryDto(
          it.id,
          it.fields,
          it.name,
          it.film,
          it.films,
          it.actor,
          it.actors,
          it.taggable,
          it.native
        )
  }
}

public fun CountryDto.copy(block: CountryDtoBuilder.() -> Unit): CountryDto {
  // CountryDto copy DSL
  return CountryDtoBuilder().also {
    it.id = this.id
    it.fields = this.fields
    it.name = this.name
    it.film = this.film
    it.films = this.films
    it.actor = this.actor
    it.actors = this.actors
    it.taggable = this.taggable
    it.native = this.native
  }
  .apply(block).let {
    CountryDto(
          it.id,
          it.fields,
          it.name,
          it.film,
          it.films,
          it.actor,
          it.actors,
          it.taggable,
          it.native
        )
  }
}

/**
 * Country entity.
 * The country can be home to several films and several actors.
 */
@CinemaDSL
public class CountryDtoBuilder {
  /**
   * Unique identifier of entity
   */
  public var id: Long? = null

  /**
   * Fields of entity in key-value map.
   * Introduced for testing complex scalars.
   */
  public var fields: Map<String, Any?>? = null

  /**
   * The name of the country
   */
  public var name: String? = null

  /**
   * Find film by id.
   * Returns null if not found.
   */
  public var film: FilmDto? = null

  /**
   * Find films of country by title and genre.
   * Returns empty list if not found.
   */
  public var films: List<FilmDto>? = null

  /**
   * Find actor by id.
   * Returns null if not found.
   */
  public var actor: ActorDto? = null

  /**
   * Find actors of country by firstName, lastName, birthday and gender.
   * Returns empty list if not found.
   */
  public var actors: List<ActorDto>? = null

  /**
   * Find entities of this country by tag
   */
  public var taggable: List<TaggableDto>? = null

  /**
   * Find native entities of this country
   */
  public var native: List<NativeDto>? = null
}
