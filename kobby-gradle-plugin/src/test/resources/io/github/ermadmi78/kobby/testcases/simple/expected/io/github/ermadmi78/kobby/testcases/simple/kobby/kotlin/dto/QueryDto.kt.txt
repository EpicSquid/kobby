@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.simple.kobby.kotlin.SimpleDSL
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.collections.List
import kotlin.let

/**
 *  Query type
 */
public data class QueryDto(
  /**
   *  find all
   */
  public val all: List<List<List<SimpleDto>?>>? = null,
)

public fun QueryDto(block: QueryDtoBuilder.() -> Unit): QueryDto {
  // QueryDto builder DSL
  return QueryDtoBuilder().apply(block).let {
    QueryDto(
          it.all
        )
  }
}

public fun QueryDto.copy(block: QueryDtoBuilder.() -> Unit): QueryDto {
  // QueryDto copy DSL
  return QueryDtoBuilder().also {
    it.all = this.all
  }
  .apply(block).let {
    QueryDto(
          it.all
        )
  }
}

/**
 *  Query type
 */
@SimpleDSL
public class QueryDtoBuilder {
  /**
   *  find all
   */
  public var all: List<List<List<SimpleDto>?>>? = null
}
