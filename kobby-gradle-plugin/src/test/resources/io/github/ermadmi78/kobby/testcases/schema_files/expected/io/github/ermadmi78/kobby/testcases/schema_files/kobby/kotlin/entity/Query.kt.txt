@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.schema_files.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.schema_files.kobby.kotlin.GraphqlContext
import io.github.ermadmi78.kobby.testcases.schema_files.kobby.kotlin.GraphqlDSL
import io.github.ermadmi78.kobby.testcases.schema_files.kobby.kotlin.GraphqlSubscriber
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public interface Query : GraphqlContext {
  public val countries: List<Country>

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      GraphqlSubscriber<Subscription>

  public fun QueryProjection.__withCurrentProjection(): Unit
}

@GraphqlDSL
public interface QueryProjection {
  public fun countries(__projection: CountryProjection.() -> Unit): Unit

  public fun __minimize(): Unit {
  }
}
