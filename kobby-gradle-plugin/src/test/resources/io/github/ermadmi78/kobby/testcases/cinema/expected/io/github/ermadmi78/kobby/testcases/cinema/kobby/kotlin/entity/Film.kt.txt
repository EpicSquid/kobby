@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
)

package io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.CinemaContext
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.CinemaDSL
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.CinemaSubscriber
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.Gender
import io.github.ermadmi78.kobby.testcases.cinema.kobby.kotlin.dto.Genre
import java.time.LocalDate
import kotlin.Any
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.Map

/**
 * Film entity.
 * The film belongs to one country and can be played by several actors.
 */
public interface Film : CinemaContext, Entity, Taggable, Native {
  /**
   * Unique identifier of entity
   */
  public override val id: Long

  /**
   * Fields of entity in key-value map.
   * Introduced for testing complex scalars.
   */
  public override val fields: Map<String, Any?>

  /**
   * Tags of entity
   */
  public override val tags: List<Tag>

  /**
   * Title of film
   */
  public val title: String

  /**
   * Genre of film.
   */
  public val genre: Genre

  /**
   * ID of the country to which the film belongs
   */
  public val countryId: Long

  /**
   * The country to which the film belongs
   */
  public val country: Country

  /**
   * Find actors of film by firstName, lastName, birthday and gender.
   * Returns empty list if not found.
   */
  public val actors: List<Actor>

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      CinemaSubscriber<Subscription>

  public fun FilmProjection.__withCurrentProjection(): Unit
}

/**
 * Film entity.
 * The film belongs to one country and can be played by several actors.
 */
@CinemaDSL
public interface FilmProjection : EntityProjection, TaggableProjection, NativeProjection {
  /**
   * Fields of entity in key-value map.
   * Introduced for testing complex scalars.
   */
  public override fun fields(__selection: EntityFieldsSelection.() -> Unit): Unit

  /**
   * Tags of entity
   */
  public override fun tags(__projection: TagProjection.() -> Unit): Unit

  /**
   * Title of film
   */
  public fun __withoutTitle(): Unit

  /**
   * Genre of film.
   */
  public fun genre(): Unit

  /**
   * The country to which the film belongs
   */
  public fun country(__projection: CountryProjection.() -> Unit = {}): Unit

  /**
   * Find actors of film by firstName, lastName, birthday and gender.
   * Returns empty list if not found.
   */
  public fun actors(__query: FilmActorsQuery.() -> Unit = {}): Unit

  public override fun __minimize(): Unit {
    __withoutTitle()
  }
}

/**
 * Find actors of film by firstName, lastName, birthday and gender.
 * Returns empty list if not found.
 */
@CinemaDSL
public interface FilmActorsSelection {
  /**
   * Part of first name of actor to search
   */
  public var firstName: String?

  /**
   * Part of last name of actor to search
   */
  public var lastName: String?

  /**
   * Find actors whose birthday is greater than or equal to birthdayFrom
   */
  public var birthdayFrom: LocalDate?

  /**
   * Find actors whose birthday is less than or equal to birthdayTo
   */
  public var birthdayTo: LocalDate?

  /**
   * Gender of actor to search
   */
  public var gender: Gender?

  /**
   * Limit of result list.
   * Put -1 to be unlimited.  
   * > Default: 10
   */
  public var limit: Int?

  /**
   * Offset of result list.  
   * > Default: 0
   */
  public var offset: Int?
}

/**
 * Find actors of film by firstName, lastName, birthday and gender.
 * Returns empty list if not found.
 */
@CinemaDSL
public interface FilmActorsQuery : FilmActorsSelection, ActorProjection
