@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlyContext
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlyDSL
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlySubscriber
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.Gender
import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto.Genre
import kotlin.Int
import kotlin.Long
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public interface Film : ContextInheritanceOnlyContext, Entity, Taggable, Native {
  public override val id: Long

  public override val tags: List<Tag>

  public val title: String

  public val genre: Genre

  public val countryId: Long

  public val country: Country

  public val actors: List<Actor>

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      ContextInheritanceOnlySubscriber<Subscription>

  public fun FilmProjection.__withCurrentProjection(): Unit
}

@ContextInheritanceOnlyDSL
public interface FilmProjection : EntityProjection, TaggableProjection, NativeProjection {
  public override fun tags(__projection: TagProjection.() -> Unit): Unit

  public fun __withoutTitle(): Unit

  public fun genre(): Unit

  public fun country(__projection: CountryProjection.() -> Unit = {}): Unit

  public fun actors(__query: FilmActorsQuery.() -> Unit = {}): Unit

  public override fun __minimize(): Unit {
    __withoutTitle()
  }
}

@ContextInheritanceOnlyDSL
public interface FilmActorsSelection {
  public var firstName: String?

  public var gender: Gender?

  /**
   * Default: 10
   */
  public var limit: Int?
}

@ContextInheritanceOnlyDSL
public interface FilmActorsQuery : FilmActorsSelection, ActorProjection
