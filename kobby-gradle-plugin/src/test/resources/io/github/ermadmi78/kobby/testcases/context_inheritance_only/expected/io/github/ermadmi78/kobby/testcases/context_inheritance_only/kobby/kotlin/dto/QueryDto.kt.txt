@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.context_inheritance_only.kobby.kotlin.ContextInheritanceOnlyDSL
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.collections.List
import kotlin.let

public data class QueryDto(
  public val country: CountryDto? = null,
  public val countries: List<CountryDto>? = null,
  public val film: FilmDto? = null,
  public val films: List<FilmDto>? = null,
  public val actor: ActorDto? = null,
  public val actors: List<ActorDto>? = null,
  public val taggable: List<TaggableDto>? = null,
)

public fun QueryDto(block: QueryDtoBuilder.() -> Unit): QueryDto {
  // QueryDto builder DSL
  return QueryDtoBuilder().apply(block).let {
    QueryDto(
          it.country,
          it.countries,
          it.film,
          it.films,
          it.actor,
          it.actors,
          it.taggable
        )
  }
}

public fun QueryDto.copy(block: QueryDtoBuilder.() -> Unit): QueryDto {
  // QueryDto copy DSL
  return QueryDtoBuilder().also {
    it.country = this.country
    it.countries = this.countries
    it.film = this.film
    it.films = this.films
    it.actor = this.actor
    it.actors = this.actors
    it.taggable = this.taggable
  }
  .apply(block).let {
    QueryDto(
          it.country,
          it.countries,
          it.film,
          it.films,
          it.actor,
          it.actors,
          it.taggable
        )
  }
}

@ContextInheritanceOnlyDSL
public class QueryDtoBuilder {
  public var country: CountryDto? = null

  public var countries: List<CountryDto>? = null

  public var film: FilmDto? = null

  public var films: List<FilmDto>? = null

  public var actor: ActorDto? = null

  public var actors: List<ActorDto>? = null

  public var taggable: List<TaggableDto>? = null
}
