@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.ContextFunOnlyContext
import io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.ContextFunOnlyDSL
import kotlin.Long
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List

public interface Taggable : Entity {
  public override val id: Long

  public val tags: List<Tag>

  public override fun __context(): ContextFunOnlyContext
}

@ContextFunOnlyDSL
public interface TaggableProjection : EntityProjection {
  public fun tags(__projection: TagProjection.() -> Unit): Unit

  public override fun __minimize(): Unit {
  }
}

@ContextFunOnlyDSL
public interface TaggableQualification {
  public fun __onFilm(__projection: FilmProjection.() -> Unit = {}): Unit

  public fun __onActor(__projection: ActorProjection.() -> Unit = {}): Unit
}

@ContextFunOnlyDSL
public interface TaggableQualifiedProjection : TaggableProjection, TaggableQualification
