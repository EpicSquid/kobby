@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
  "RedundantSuppression",
  "KotlinRedundantDiagnosticSuppress",
)

package io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.entity

import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideContext
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideDSL
import io.github.ermadmi78.kobby.testcases.multioverride.kobby.kotlin.MultiOverrideSubscriber
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit

public interface InterfaceBase1 : MultiOverrideContext {
  public val noOverride1: String

  public val interfaceMultiOverride: String

  public override suspend fun query(__projection: QueryProjection.() -> Unit): Query

  public override suspend fun mutation(__projection: MutationProjection.() -> Unit): Mutation

  public override fun subscription(__projection: SubscriptionProjection.() -> Unit):
      MultiOverrideSubscriber<Subscription>
}

@MultiOverrideDSL
public interface InterfaceBase1Projection {
  public fun noOverride1(size: Int? = null): Unit

  public fun interfaceMultiOverride(size: Int?): Unit

  public fun __minimize(): Unit {
  }
}

@MultiOverrideDSL
public interface InterfaceBase1Qualification {
  public
      fun __onInterfaceMultiOverrideImplementation(__projection: InterfaceMultiOverrideImplementationProjection.() -> Unit):
      Unit
}

@MultiOverrideDSL
public interface InterfaceBase1QualifiedProjection : InterfaceBase1Projection,
    InterfaceBase1Qualification
