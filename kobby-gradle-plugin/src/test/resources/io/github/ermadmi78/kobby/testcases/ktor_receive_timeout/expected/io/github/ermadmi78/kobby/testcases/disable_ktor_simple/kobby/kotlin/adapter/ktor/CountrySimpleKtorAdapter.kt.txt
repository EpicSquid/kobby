@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
)

package io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.adapter.ktor

import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.CountryAdapter
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.MutationDto
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.QueryDto
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryException
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryMutationResult
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryQueryResult
import io.github.ermadmi78.kobby.testcases.disable_ktor_simple.kobby.kotlin.dto.graphql.CountryRequest
import io.ktor.client.HttpClient
import io.ktor.client.request.post
import io.ktor.client.request.url
import io.ktor.http.ContentType
import io.ktor.http.contentType
import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.collections.Map
import kotlin.collections.isNotEmpty
import kotlin.collections.mapOf
import kotlin.let
import kotlin.takeIf

public open class CountrySimpleKtorAdapter(
  protected val client: HttpClient,
  protected val url: String? = null,
  protected val headers: Map<String, String> = mapOf(),
  protected val listener: (CountryRequest) -> Unit = {},
) : CountryAdapter {
  public override suspend fun executeQuery(query: String, variables: Map<String, Any?>): QueryDto {
    val request = CountryRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = headers
    val result = client.post<CountryQueryResult> {
      body = request
      contentType(ContentType.Application.Json)
      this@CountrySimpleKtorAdapter.url?.also {
        url(it)
      }
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw CountryException("GraphQL query failed", request, it)
    }
    return result.data ?: throw CountryException(
          "GraphQL query completes successfully but returns no data",
          request
        )
  }

  public override suspend fun executeMutation(query: String, variables: Map<String, Any?>):
      MutationDto {
    val request = CountryRequest(query, variables)
    listener(request)

    val httpHeaders: Map<String, String> = headers
    val result = client.post<CountryMutationResult> {
      body = request
      contentType(ContentType.Application.Json)
      this@CountrySimpleKtorAdapter.url?.also {
        url(it)
      }
      for (element in httpHeaders) {
        headers[element.key] = element.value
      }
    }

    result.errors?.takeIf { it.isNotEmpty() }?.let {
      throw CountryException("GraphQL mutation failed", request, it)
    }
    return result.data ?: throw CountryException(
          "GraphQL mutation completes successfully but returns no data",
          request
        )
  }
}
