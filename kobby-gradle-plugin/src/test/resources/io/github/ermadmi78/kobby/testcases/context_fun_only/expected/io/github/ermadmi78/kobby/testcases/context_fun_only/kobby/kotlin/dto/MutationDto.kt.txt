@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments",
)

package io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.dto

import io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.ContextFunOnlyDSL
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.let

public data class MutationDto(
  public val createCountry: CountryDto? = null,
  public val createFilm: FilmDto? = null,
  public val createActor: ActorDto? = null,
)

public fun MutationDto(block: MutationDtoBuilder.() -> Unit): MutationDto {
  // MutationDto builder DSL
  return MutationDtoBuilder().apply(block).let {
    MutationDto(
          it.createCountry,
          it.createFilm,
          it.createActor
        )
  }
}

public fun MutationDto.copy(block: MutationDtoBuilder.() -> Unit): MutationDto {
  // MutationDto copy DSL
  return MutationDtoBuilder().also {
    it.createCountry = this.createCountry
    it.createFilm = this.createFilm
    it.createActor = this.createActor
  }
  .apply(block).let {
    MutationDto(
          it.createCountry,
          it.createFilm,
          it.createActor
        )
  }
}

@ContextFunOnlyDSL
public class MutationDtoBuilder {
  public var createCountry: CountryDto? = null

  public var createFilm: FilmDto? = null

  public var createActor: ActorDto? = null
}
