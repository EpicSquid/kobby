@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.context_fun_only.kobby.kotlin.dto.graphql

import kotlin.Any
import kotlin.String
import kotlin.Suppress
import kotlin.collections.Map

/**
 * Message protocol description see
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public interface ContextFunOnlyMessage

/**
 * Message protocol description see
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public interface ContextFunOnlyClientMessage

/**
 * Message protocol description see
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public interface ContextFunOnlyServerMessage

/**
 * See GQL_CONNECTION_INIT
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public data class ContextFunOnlyMessageConnectionInit(
  public val payload: Map<String, Any?>? = null
) : ContextFunOnlyMessage, ContextFunOnlyClientMessage

/**
 * See GQL_START
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public data class ContextFunOnlyMessageStart(
  public val id: String,
  public val payload: ContextFunOnlyRequest
) : ContextFunOnlyMessage, ContextFunOnlyClientMessage

/**
 * See GQL_STOP
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public data class ContextFunOnlyMessageStop(
  public val id: String
) : ContextFunOnlyMessage, ContextFunOnlyClientMessage

/**
 * See GQL_CONNECTION_TERMINATE
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public class ContextFunOnlyMessageConnectionTerminate : ContextFunOnlyMessage,
    ContextFunOnlyClientMessage

/**
 * See GQL_CONNECTION_ERROR
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public data class ContextFunOnlyMessageConnectionError(
  public val payload: Any? = null
) : ContextFunOnlyMessage, ContextFunOnlyServerMessage

/**
 * See GQL_CONNECTION_ACK
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public data class ContextFunOnlyMessageConnectionAck(
  public val payload: Any? = null
) : ContextFunOnlyMessage, ContextFunOnlyServerMessage

/**
 * See GQL_DATA
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public data class ContextFunOnlyMessageData(
  public val id: String,
  public val payload: ContextFunOnlySubscriptionResult
) : ContextFunOnlyMessage, ContextFunOnlyServerMessage

/**
 * See GQL_ERROR
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public data class ContextFunOnlyMessageError(
  public val id: String,
  public val payload: ContextFunOnlyErrorResult
) : ContextFunOnlyMessage, ContextFunOnlyServerMessage

/**
 * See GQL_COMPLETE
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public data class ContextFunOnlyMessageComplete(
  public val id: String
) : ContextFunOnlyMessage, ContextFunOnlyServerMessage

/**
 * See GQL_CONNECTION_KEEP_ALIVE
 * [here](https://github.com/apollographql/subscriptions-transport-ws/blob/master/PROTOCOL.md)
 */
public class ContextFunOnlyMessageConnectionKeepAlive : ContextFunOnlyMessage,
    ContextFunOnlyServerMessage
