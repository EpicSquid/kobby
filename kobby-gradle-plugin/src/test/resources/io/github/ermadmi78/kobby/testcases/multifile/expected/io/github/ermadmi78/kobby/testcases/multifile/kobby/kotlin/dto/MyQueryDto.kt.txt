@file:Suppress(
  "RedundantVisibilityModifier",
  "RedundantUnitReturnType",
  "FunctionName",
  "PropertyName",
  "ObjectPropertyName",
  "MemberVisibilityCanBePrivate",
  "ConstantConditionIf",
  "CanBeParameter",
  "unused",
  "RemoveExplicitTypeArguments"
)

package io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.dto

import com.fasterxml.jackson.`annotation`.JsonCreator
import com.fasterxml.jackson.`annotation`.JsonInclude
import com.fasterxml.jackson.`annotation`.JsonTypeInfo
import com.fasterxml.jackson.`annotation`.JsonTypeName
import io.github.ermadmi78.kobby.testcases.multifile.kobby.kotlin.GraphqlDSL
import kotlin.Suppress
import kotlin.Unit
import kotlin.also
import kotlin.apply
import kotlin.collections.List
import kotlin.let

@JsonTypeName(value = "MyQuery")
@JsonTypeInfo(
  use = JsonTypeInfo.Id.NAME,
  include = JsonTypeInfo.As.PROPERTY,
  property = "__typename",
  defaultImpl = MyQueryDto::class
)
@JsonInclude(value = JsonInclude.Include.NON_ABSENT)
public data class MyQueryDto @JsonCreator constructor(
  public val find: List<MyResultDto>? = null
)

public fun MyQueryDto(block: MyQueryDtoBuilder.() -> Unit): MyQueryDto {
  // MyQueryDto builder DSL
  return MyQueryDtoBuilder().apply(block).let {
    MyQueryDto(
          it.find
        )
  }
}

public fun MyQueryDto.copy(block: MyQueryDtoBuilder.() -> Unit): MyQueryDto {
  // MyQueryDto copy DSL
  return MyQueryDtoBuilder().also {
    it.find = this.find
  }
  .apply(block).let {
    MyQueryDto(
          it.find
        )
  }
}

@GraphqlDSL
public class MyQueryDtoBuilder {
  public var find: List<MyResultDto>? = null
}
